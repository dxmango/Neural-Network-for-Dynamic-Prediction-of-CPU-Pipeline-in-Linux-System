//following are the codes that I added into those three files
in the sim-bred.c

1.else if (!mystricmp(pred_type, "neural"))
    {
      if (bimod_nelt != 1)
	fatal("bad bimod predictor config (<table_size>)");
      if (btb_nelt != 2)
	fatal("bad btb config (<num_sets> <associativity>)");

2.else if (!mystricmp(pred_type, "neural"))
    {
      if (bimod_nelt != 1)
	fatal("bad bimod predictor config (<table_size>)");
      if (btb_nelt != 2)
	fatal("bad btb config (<num_sets> <associativity>)");

      
      pred = bpred_create(BPredneural,
			  /* bimod table size */bimod_config[0],
			  /* 2lev l1 size */0,
			  /* 2lev l2 size */0,
			  /* meta table size */0,
			  /* history reg size */0,
			  /* history xor address */0,
			  /* btb sets */btb_config[0],
			  /* btb assoc */btb_config[1],
			  /* ret-addr stack size */ras_size);
    }

in the bpred.c
1.case BPredneural:
     pred->dirpred.bimod = 
     bpred_dir_create(BPred2bit, bimod_size, 0, 0, 0);
     break;
2.case BPredneural:
    {
      pred->neuralstruct.biasinputweight=50;
      int i;

      /* allocate BTB */
      if (!btb_sets || (btb_sets & (btb_sets-1)) != 0)
	fatal("number of BTB sets must be non-zero and a power of two");
      if (!btb_assoc || (btb_assoc & (btb_assoc-1)) != 0)
	fatal("BTB associativity must be non-zero and a power of two");

      if (!(pred->btb.btb_data = calloc(btb_sets * btb_assoc,
					sizeof(struct bpred_btb_ent_t))))
	fatal("cannot allocate BTB");

      pred->btb.sets = btb_sets;
      pred->btb.assoc = btb_assoc;

      if (pred->btb.assoc > 1)
	for (i=0; i < (pred->btb.assoc*pred->btb.sets); i++)
	  {
	    if (i % pred->btb.assoc != pred->btb.assoc - 1)
	      pred->btb.btb_data[i].next = &pred->btb.btb_data[i+1];
	    else
	      pred->btb.btb_data[i].next = NULL;
	    
	    if (i % pred->btb.assoc != pred->btb.assoc - 1)
	      pred->btb.btb_data[i+1].prev = &pred->btb.btb_data[i];
	  }
     
      /* allocate retstack */
      if ((retstack_size & (retstack_size-1)) != 0)
	fatal("Return-address-stack size must be zero or a power of two");
      
      pred->retstack.size = retstack_size;
      if (retstack_size)
	if (!(pred->retstack.stack = calloc(retstack_size, 
					    sizeof(struct bpred_btb_ent_t))))
	  fatal("cannot allocate return-address-stack");
      pred->retstack.tos = retstack_size - 1;
      
      break;
    }
3.case BPredneural:
    fprintf(stream, "pred_dir: %s: predict taken\n", name);
    break;
4.case BPredneural:
    bpred_dir_config (pred->dirpred.bimod, "neural", stream);
    fprintf(stream, "btb: %d sets x %d associativity", 
	    pred->btb.sets, pred->btb.assoc);
    fprintf(stream, "ret_stack: %d entries", pred->retstack.size);
    break;
5. case BPredneural:
      { 
        index = (baddr >> MD_BR_SHIFT) & (pred->btb.sets - 1);
        int ii=0;
         while(ii<=hislen-1)
            {
sumsum=sumsum+pred->neuralstruct.history[ii]*pred->neuralstruct.weight[index][ii];
             ii++;
                 }
      /*sumsum=sumsum+pred->neuralstruct.history[0]*pred->neuralstruct.weight[index][0]+pred->neuralstruct.history[1]*pred->neuralstruct.weight[index][1]+pred->neuralstruct.history[2]*pred->neuralstruct.weight[index][2]+pred->neuralstruct.history[3]*pred->neuralstruct.weight[index][3]+pred->neuralstruct.history[4]*pred->neuralstruct.weight[index][4]+pred->neuralstruct.history[5]*pred->neuralstruct.weight[index][5]+pred->neuralstruct.history[6]*pred->neuralstruct.weight[index][6]+pred->neuralstruct.history[7]*pred->neuralstruct.weight[index][7]+pred->neuralstruct.history[8]*pred->neuralstruct.weight[index][8]+pred->neuralstruct.history[9]*pred->neuralstruct.weight[index][9];*/
          
        sumsum=sumsum+pred->neuralstruct.biasinputweight;
        break;
      }
6.if(pred->class==BPredneural)
{
    if (pbtb == NULL)
    {
      /* BTB miss -- just return a predicted direction */
      return ((sumsum>= 0)
	      ? /* taken */ 1
	      : /* not taken */ 0);
    }
  else
    {
      /* BTB hit, so return target if it's a predicted-taken branch */
      return ((sumsum >= 0)
	      ? /* taken */ pbtb->target
	      : /* not taken */ 0);
7. if(pred->class == BPredneural)
{
        /*Modify weight table by parameter correct*/
        if(correct==1)
           {
               ;
               }
        else{
               
   //modify the weight table
                int i=0;
               while(i<=hislen-1)
                { 
if(taken)
{
                //if taken, then for every +1 in history table,we add 1 to to the corresponding weight in the weight table,and biasinputweight+1.
                if(pred->neuralstruct.history[i]==1)
                pred->neuralstruct.weight[(baddr >> MD_BR_SHIFT) & (pred->btb.sets - 1)][i]=pred->neuralstruct.weight[(baddr >> MD_BR_SHIFT) & (pred->btb.sets - 1)][i]+1;
                if(pred->neuralstruct.history[i]==-1)
pred->neuralstruct.weight[(baddr >> MD_BR_SHIFT) & (pred->btb.sets - 1)][i]=pred->neuralstruct.weight[(baddr >> MD_BR_SHIFT) & (pred->btb.sets - 1)][i]-1;  
                pred->neuralstruct.biasinputweight+=1;
                          
 }
else{          //if not taken, then for every +1 in history table,we minus 1 to to the corresponding weight in the weight table,and biasinputweight-1.

 if(pred->neuralstruct.history[i]==1)
                pred->neuralstruct.weight[(baddr >> MD_BR_SHIFT) & (pred->btb.sets - 1)][i]=pred->neuralstruct.weight[(baddr >> MD_BR_SHIFT) & (pred->btb.sets - 1)][i]-1;
                if(pred->neuralstruct.history[i]==-1)
pred->neuralstruct.weight[(baddr >> MD_BR_SHIFT) & (pred->btb.sets - 1)][i]=pred->neuralstruct.weight[(baddr >> MD_BR_SHIFT) & (pred->btb.sets - 1)][i]+1;
pred->neuralstruct.biasinputweight+=-1;
}              
                i++;
                }
             }
        /*Modify the history table*/
        if(taken==1)
            { //shift
              //put +1
            int j=0;
             while(j<=hislen-2)
                {  pred->neuralstruct.history[j]=pred->neuralstruct.history[j+1];
j++;
                   }
             pred->neuralstruct.history[j]=1;
              }
        else
         {    // put -1;
             int j=0;
             while(j<=hislen-2)
                {  pred->neuralstruct.history[j]=pred->neuralstruct.history[j+1];
j++;
                   }
             pred->neuralstruct.history[j]=-1;
               }

}

in bpred.h
1.struct{
             int biasinputweight;
             int history[hislen];
             int weight[1024][hislen];   
 }neuralstruct;
